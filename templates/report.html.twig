{# templates/lucky_number.html.twig #}

{% include 'base.html.twig' %}

<body>
    {% include 'nav.twig' %}
    <div class="container">
        <h2>Report</h2>
        <h3>KMOM01</h3>
        <p>De kunskaper jag har inom objektorientering sedan tidigare är det som jag har lärt mig i tidigare kurser
            inom Webbprogrammering på Bth. Innan denna kurs läste jag objektorienterad Python och har även läst lite
            inom JavaScript i vintras.</p>
        <p>För att komma igång och skapa sina första klasser måste man måste förstå själva uppgyggnaden av hur en
            klass fungerar. Jag ser det som att klass är som en mall
            för hur ett objekt ska kunna skapas. När man skapar en klass instansieras ett objekt av klassen som går
            efter mallen hur klassen är uppbyggd. </p>
        <p>Jag tycker den var ganska svår att förstå sig på då man fick försöka klura ut saker på egen hand denna
            gång när man inte hade en mall som man tidigare brukar ha att gå efter. Eftersom jag är lite bekant med
            objektorientering innan är det lättare att förstå hur objektorientering fungerar i PHP, även att jag
            tycker det verkar lite klurigare än hur jag har använt det innan. Normalt sett tycker jag det är jättekul
            att designa webbsidor men jag känner att det fick komma i andra hand denna gång, det vill säga strukruren på
            css-koden och sidans responsivitet. Jag känner att jag ville lägga mest energi på att få alla delar att
            faktiskt fungera då jag hade ganska mycket problem med det vilket gjorde att jag fick avinstallera och
            ominstallera symfony flera gånger för att börja om på ny kula. </p>
        <p>Just när det kommer till programmering lär jag mig inte lika mycket när jag sitter och läser ett långt
            dokument utan att få göra det praktiskt så därav skummade jag bara artikeln lite snabbt utan att läsa
            den allt för djupt. Jag tycker ändå att det finns många värdefulla delar i artikeln som går att ha
            användning av när man ska skriva sin kod som man lätt kan kolla upp och få svar på. Eftersom jag inte är
            så insatt i PHP sedan tidigare (förutom webtec-kursen i höstas jag läste) är kapitlet om “the basics”
            mest värdefullt för mig för tillfället. Jag har användning av det för att kunna repetera och lära mig
            grunderna i Php eftersom jag inte tyckte det satte sig tillräckligt sist. Jag tycker även det är bra att
            artikeln har länka i sig och hänvisar vidare till exempelvis manualen om man vill lära sig om till
            exempel objektorienterad PHP.</p>
        <p>Mitt TIL är hela grejen med Symfony. Jag känner absolut inte att jag kan det eller förstår det än, men
            det är ju bara första veckan så jag antar att det kommer sätta sig lite längre fram. Jag är fortfarande
            ganska osäker på vad jag håller på med. Har försökt att läsa lite mer på webben för att få ett
            sammanhang, men det skulle jag kunna fortsätta med hur länge som helst eftersom det känns så brett.
            Därför får jag nöja mig med att känna att jag i alla fall har kommit igång och fått en överblick om vad
            kursen kommer innehålla.</p>
        <h3>KMOM02</h3>
        <p>Arv innebär att vi kan använda kod från en annan klass i en ny klass för att slippa återanvända koden. Det
            finns en förälderklass som har metoder och en barnklass som kan använda dessa metoder.
            Kompostion innebär att det finns ett starkt beroende mellan objekten. Den ena kan inte existera utan den
            andra. Interface är en struktur som visar vad som förväntas finnas med i koden. Till exempel att en klass
            ska innehålla specifika metoder. Ett trait är likt arv och består av bland annat metoder som kan ”kopieras”
            in i andra klasser. </p>

        <p>Eftersom veckans uppgift var så pass stor kändes det omöjligt att kunna göra allt utförligt på så pass kort
            tid. Det var så mycket nytt att lära och det kändes som man kastades in i ett stort projekt utan att
            grunderna hunnit sitta. Jag försökte ta uppgifterna steg för steg och börja med grunderna. Av någon
            anledning var jag tvungen att ominstallera Symfony och börja om från början när jag nästan var klar då mitt
            dbwebb-kommando slutade fungera. Därav fick jag göra ett nytt GitHub-repo (mvc-report, tidigare report) då
            det inte gick att committa mina filer till mitt gamla repo. Därför har jag bara commits och tags från detta
            kursmoment, de andra ligger kvar i mitt gamla repo. Jag känner väl ändå relativt nöjd med min kod då jag har
            lagt många timmar på den. Det jag hade kunnat göra bättre är att sätta mig in i hur arv fungerar lite mer
            men jag antar att det kommer sätta sig mer och mer för varje vecka. Denna vecka ville jag fokusera på att
            förstå hur grunderna och syntaxen ser ut i klasser i Php och hur de fungerar med att kunna rendera det som
            returneras som variabler på själva webbsidan. Jag hade kanske även kunnat fixa så man inte behöver göra en
            hard reset när man är i shuffle card för att sessionen ska avslutas men jag känner att tiden inte räcker
            till för det. Jag vill kunna vara klar tills veckan är slut så jag inte hamnar efter nästa vecka. </p>


        <p>Jag tyckte det var ganska svårt att modellera ett kortspel med flödesdiagram och pseudokod. Flödesdiagram var
            relativt enkelt att förstå och göra ett diagram utefter det men pseudokoden fattade jag inte riktigt hur jag
            skulle skriva och om det var rätt. Därför skrev jag min kod så som jag tänkte i huvudet. Eftersom jag tyckte
            veckans uppgift var svår var det svårt att försöka visualisera sig en ny kod när jag knappt känner att jag
            hunnit veckans kod sjunka in och satt sig. </p>

        <p>Mitt TIL är att testa min kod efter varje liten del jag lägger till. Ibland kan det varit så att jag lagt
            till ett lite längre stycke som jag tänker ska fungera som inte gör det och då får jag backa tillbaka alla
            steg för att se vad som är fel. Då är det bättre att lägga till en del i taget och kolla så allt fungerar.
        </p>
        <h3>KMOM03</h3>
        <p>Jag tyckte det var ganska svårt att modellera ett kortspel efter ett flödesdiagram och pseudokod. Eftersom
            jag tyckte förra veckan var så omfattande (hann göra pseudokoden och flödesdiagrammet innan vi fick
            tillåtelse att vänta med det till denna vecka) hade jag svårt att visualisera hur jag skulle implementera
            klasserna och dess kod inför denna vecka. Därav blev det inte riktigt som jag tänkte eftersom vissa delar
            inte fungerade och så döpte jag om variabler/metoder/klasser för att de inte skulle ha för lika namn. Om jag
            hade ägnat mer tid åt att ha möjlighet att kunna göra en bra pseudokod tror jag absolut att det kan vara
            till användning för att stödja min problemlösning och tankearbete för att strukturera min kod.</p>
        <p>Jag löste grunderna i spelet. Det fick bli så att jag fick hitta på lite egna regler för att jag skulle få
            ihop spelet. Ess är till exempel alltid värt 11. Jag gjorde även så att spelaren börjar med två kort och
            banken bara ett för att spelaren inte ska behöva trycka på knappen så många gånger. Jag insåg när jag
            började koda att det var svårt att återanvända all kod som jag gjorde förra kursmomentet då den koden var
            skapad så den skulle fungera med den veckans uppgifter. Jag insåg att jag behövde skapa ytterligare en
            “card” klass som skapar själva korten och dess värde. Med hjälp av den klassen kunde jag dock återanvända
            mycket av koden. Jag tycker det har varit lite svårt eftersom vi inte har fått någon grundlig föreläsning om
            hur klasser och dess attribut fungerar i Php så mycket har man behövt ta reda på själv eller googlat. Även
            hur sessioner fungerar har jag fortfarande lite svårt att förstå hur det fungerar. Känner inte att det finns
            jättemycket tid att sätta sig in i alla nya begrepp/repetera från webtec-kursen. Därav är min kod kanske
            inte den bästa SOLID eftersom jag inte riktigt vet hur jag ska kunna förbättra den när jag fortfarande
            håller på att lära mig hur jag ska formulera den. Jag vet att jag får upp många felmeddelanden med “composer
            lint” men innan var det nästan dubbelt så mycket och nu har jag verkligen försökt korta ner men vissa
            felmeddelanden som jag får upp har jag ingen aning om vad de betyder och när jag googlar får jag inga svar
            alls. Jag tog i princip bort mina “else-satser” förutom en eller två som jag var tvungen att ha med för att
            min kod inte skulle krascha. Jag försökte även göra ett Interface för Player-klassen men eftersom jag inte
            har gjort något sådant innan vet jag inte om jag gjorde rätt. Jag hade kunnat göra bättre också att
            knapparna i templaten inte går att trycka på allihop samtidigt eller att det dyker upp ett flash-meddelande
            direkt när poängen överstiger 21 eller liknande. Men helt ärligt hade jag kämpigt som det var att få spelet
            att gå runt så jag är glad att jag ens fick till något.</p>
        <p>
            Jag tycker Symfony fortfarande är ett klurigt ramverk. Jag tycker det är svårt med Namespace och dessa
            felmeddelanden som kommer upp som inte alls förklarar vad som är fel. Felsökningen tar upp ca 80% (det vill
            säga försöka ta reda på vad som är fel i koden) vilket lämnar ytterst lite tid till att faktiskt försöka
            implementera en bra kod som reglerar spelreglerna på ett bra sätt utan upprepning. Jag är som jag tidigare
            nämnt en rejäl nybörjare inom programmering så jag vet att jag har mycket kvar att lära innan jag kan skriva
            en dry-kod helt och hållet.
        </p>
        <p>Mitt TIL är att bara fokusera på grunderna och inte stressa över om det inte blir perfekt och jag inte blir
            helt nöjd över koden. Jag lägger mer tid än vad ramarna visar (säkert nästan dubbelt så mycket) och jag blir
            knappt nöjd ändå. Jag tyckte dock veckans omfattning var bra då det kändes som en lagom mängd. Anledningen
            till att det gick åt så mycket tid för min del var på grund av felsökningen och att jag inte har lärt mig
            grunderna i hur man kan formulera koden i objektorienterad PHP helt och hållet ännu vilket kräver att jag
            måste leta information på egen hand.</p>
        <h3>KMOM04</h3>
        <p>Jag tycker PHPUnit var ett mycket smidigt testverktyg då det genom Code Coverage går att se svart på vitt vad
            det är som testas och inte så man kan få en överblick hur man ska utforma sina tester. Jag tycker PHPUnit
            känns på liknande sätt hur man skriver tester i Python så därav var det ganska enkelt att förstå sig på. Jag
            hade troligtvis kunna skriva bättre och utförligare tester som skapa tester när koden går fel eller via
            mocking men jag var tvungen att skriva om majoriteten av min kod denna vecka då jag insåg att jag gjort helt
            fel när det gäller sessioner i Symfony så mitt fokus låg ganska mycket på det. </p>

        <p>På kortspelet i min src-katalog nådde jag upp till nästan 80% i kodtäckning. Det var vissa delar som jag
            tyckte var svåra att testa. Det vill säga när kortspelet var klart och man kunde få många utfall i statusen.
            Det tyckte jag var lite svårt att få till utan att behöva skriva en helt uppsats kod så därför testade jag
            bara det mest basic, att det returnerade en typ av sträng. Annars tyckte jag att min kodtäckning var helt
            okej. </p>

        <p>Det finns absolut delar i min kod som kan förbättras och göras mer testbar. Som att kanske ändra om alla mina
            if-satser till egna metoder istället, men som tidigare nämnt var jag tvungen att ändra om ganska stor del av
            min källkod då jag hade gjort fel med sessioner i tidigare kursmoment så därför hann jag inte med att ändra
            om ytterligare. Jag tycker emellertid att det var många delar i min kod som var enkla att testa som gjorde
            att det gick att nå hög kodtäckning. </p>

        <p>När jag skrev tester till min kod i början av veckan märkte jag att det inte fungerade med huruvida jag hade
            kodat mina sessioner. När jag kodade mina sessioner i tidigare kursmoment följde jag en artikel som vi hade
            som läsanvisning men fattade inte då att den inte gällde för Symfony eftersom det inte stod något om det.
            Som jag har nämnt i tidigare redovisningstexter har tidigare kursmoment varit stressiga så har inte alls
            känt mig nöjd över det jag har åstadkommit i kodväg. När jag började skriva tester denna vecka kom det ikapp
            mig vilket gjorde att jag nästan fick börja om på ruta ett igen kändes det som eftersom koden jag hade
            skrivit inte var testbar i den mån som det krävdes. Jag hade önskat att vi hade fått en mer grundläggande
            genomgång från första början hur sessioner fungerar i Symfony och inte bara en kort artikel med kodexempel
            eller en föreläsning när det inte förklaras så djupgående. Eftersom jag har jobbat lite med sessioner
            tidigare i webtec-kursen (dock inte så informationen satte sig så djupt) tänkte jag att man formulerade sig
            på samma sätt som i Symfony, men så var inte fallet. </p>

        <p>Jag tycker testbar kod kan identifiera “snygg och ren kod”. Jag märkte det när jag skrev mina tester att de
            metoder som var smidigast att testa var de som var korta och koncist utan invecklade if-satser osv. Om man
            ändrar om alla if-satser till korta metoder skulle koden bli mer testbar och samtidigt snygg och ren. </p>

        <p>Mitt TIL är nog att jag kanske får acceptera om jag inte hinner med veckans uppgifter när deadlinesen är
            eftersom det bidrar till att jag inte skriver bra kod när det är så pass mycket att göra. Det bästa för min
            del är att känna mig säker på det jag gör innan jag börjar koda eftersom det annars bidrar till att jag
            inser att jag gjort fel och får göra om allt. </p>
    </div>


    {% include 'footer.twig' %}
</body>