{# templates/lucky_number.html.twig #}

{% include 'base.html.twig' %}

<body>
    {% include 'nav.twig' %}
    <div class="container">
        <h2>Report</h2>
        <div class="report">
            <h3>KMOM01</h3>
            <p>De kunskaper jag har inom objektorientering sedan tidigare är det som jag har lärt mig i tidigare kurser
                inom Webbprogrammering på Bth. Innan denna kurs läste jag objektorienterad Python och har även läst lite
                inom JavaScript i vintras.</p>
            <p>För att komma igång och skapa sina första klasser måste man måste förstå själva uppgyggnaden av hur en
                klass fungerar. Jag ser det som att klass är som en mall
                för hur ett objekt ska kunna skapas. När man skapar en klass instansieras ett objekt av klassen som går
                efter mallen hur klassen är uppbyggd. </p>
            <p>Jag tycker den var ganska svår att förstå sig på då man fick försöka klura ut saker på egen hand denna
                gång när man inte hade en mall som man tidigare brukar ha att gå efter. Eftersom jag är lite bekant med
                objektorientering innan är det lättare att förstå hur objektorientering fungerar i PHP, även att jag
                tycker det verkar lite klurigare än hur jag har använt det innan. Normalt sett tycker jag det är
                jättekul
                att designa webbsidor men jag känner att det fick komma i andra hand denna gång, det vill säga
                strukruren på
                css-koden och sidans responsivitet. Jag känner att jag ville lägga mest energi på att få alla delar att
                faktiskt fungera då jag hade ganska mycket problem med det vilket gjorde att jag fick avinstallera och
                ominstallera symfony flera gånger för att börja om på ny kula. </p>
            <p>Just när det kommer till programmering lär jag mig inte lika mycket när jag sitter och läser ett långt
                dokument utan att få göra det praktiskt så därav skummade jag bara artikeln lite snabbt utan att läsa
                den allt för djupt. Jag tycker ändå att det finns många värdefulla delar i artikeln som går att ha
                användning av när man ska skriva sin kod som man lätt kan kolla upp och få svar på. Eftersom jag inte är
                så insatt i PHP sedan tidigare (förutom webtec-kursen i höstas jag läste) är kapitlet om “the basics”
                mest värdefullt för mig för tillfället. Jag har användning av det för att kunna repetera och lära mig
                grunderna i Php eftersom jag inte tyckte det satte sig tillräckligt sist. Jag tycker även det är bra att
                artikeln har länka i sig och hänvisar vidare till exempelvis manualen om man vill lära sig om till
                exempel objektorienterad PHP.</p>
            <p>Mitt TIL är hela grejen med Symfony. Jag känner absolut inte att jag kan det eller förstår det än, men
                det är ju bara första veckan så jag antar att det kommer sätta sig lite längre fram. Jag är fortfarande
                ganska osäker på vad jag håller på med. Har försökt att läsa lite mer på webben för att få ett
                sammanhang, men det skulle jag kunna fortsätta med hur länge som helst eftersom det känns så brett.
                Därför får jag nöja mig med att känna att jag i alla fall har kommit igång och fått en överblick om vad
                kursen kommer innehålla.</p>
            <h3>KMOM02</h3>
            <p>Arv innebär att vi kan använda kod från en annan klass i en ny klass för att slippa återanvända koden.
                Det
                finns en förälderklass som har metoder och en barnklass som kan använda dessa metoder.
                Kompostion innebär att det finns ett starkt beroende mellan objekten. Den ena kan inte existera utan den
                andra. Interface är en struktur som visar vad som förväntas finnas med i koden. Till exempel att en
                klass
                ska innehålla specifika metoder. Ett trait är likt arv och består av bland annat metoder som kan
                ”kopieras”
                in i andra klasser. </p>

            <p>Eftersom veckans uppgift var så pass stor kändes det omöjligt att kunna göra allt utförligt på så pass
                kort
                tid. Det var så mycket nytt att lära och det kändes som man kastades in i ett stort projekt utan att
                grunderna hunnit sitta. Jag försökte ta uppgifterna steg för steg och börja med grunderna. Av någon
                anledning var jag tvungen att ominstallera Symfony och börja om från början när jag nästan var klar då
                mitt
                dbwebb-kommando slutade fungera. Därav fick jag göra ett nytt GitHub-repo (mvc-report, tidigare report)
                då
                det inte gick att committa mina filer till mitt gamla repo. Därför har jag bara commits och tags från
                detta
                kursmoment, de andra ligger kvar i mitt gamla repo. Jag känner väl ändå relativt nöjd med min kod då jag
                har
                lagt många timmar på den. Det jag hade kunnat göra bättre är att sätta mig in i hur arv fungerar lite
                mer
                men jag antar att det kommer sätta sig mer och mer för varje vecka. Denna vecka ville jag fokusera på
                att
                förstå hur grunderna och syntaxen ser ut i klasser i Php och hur de fungerar med att kunna rendera det
                som
                returneras som variabler på själva webbsidan. Jag hade kanske även kunnat fixa så man inte behöver göra
                en
                hard reset när man är i shuffle card för att sessionen ska avslutas men jag känner att tiden inte räcker
                till för det. Jag vill kunna vara klar tills veckan är slut så jag inte hamnar efter nästa vecka. </p>


            <p>Jag tyckte det var ganska svårt att modellera ett kortspel med flödesdiagram och pseudokod. Flödesdiagram
                var
                relativt enkelt att förstå och göra ett diagram utefter det men pseudokoden fattade jag inte riktigt hur
                jag
                skulle skriva och om det var rätt. Därför skrev jag min kod så som jag tänkte i huvudet. Eftersom jag
                tyckte
                veckans uppgift var svår var det svårt att försöka visualisera sig en ny kod när jag knappt känner att
                jag
                hunnit veckans kod sjunka in och satt sig. </p>

            <p>Mitt TIL är att testa min kod efter varje liten del jag lägger till. Ibland kan det varit så att jag lagt
                till ett lite längre stycke som jag tänker ska fungera som inte gör det och då får jag backa tillbaka
                alla
                steg för att se vad som är fel. Då är det bättre att lägga till en del i taget och kolla så allt
                fungerar.
            </p>
            <h3>KMOM03</h3>
            <p>Jag tyckte det var ganska svårt att modellera ett kortspel efter ett flödesdiagram och pseudokod.
                Eftersom
                jag tyckte förra veckan var så omfattande (hann göra pseudokoden och flödesdiagrammet innan vi fick
                tillåtelse att vänta med det till denna vecka) hade jag svårt att visualisera hur jag skulle
                implementera
                klasserna och dess kod inför denna vecka. Därav blev det inte riktigt som jag tänkte eftersom vissa
                delar
                inte fungerade och så döpte jag om variabler/metoder/klasser för att de inte skulle ha för lika namn. Om
                jag
                hade ägnat mer tid åt att ha möjlighet att kunna göra en bra pseudokod tror jag absolut att det kan vara
                till användning för att stödja min problemlösning och tankearbete för att strukturera min kod.</p>
            <p>Jag löste grunderna i spelet. Det fick bli så att jag fick hitta på lite egna regler för att jag skulle
                få
                ihop spelet. Ess är till exempel alltid värt 11. Jag gjorde även så att spelaren börjar med två kort och
                banken bara ett för att spelaren inte ska behöva trycka på knappen så många gånger. Jag insåg när jag
                började koda att det var svårt att återanvända all kod som jag gjorde förra kursmomentet då den koden
                var
                skapad så den skulle fungera med den veckans uppgifter. Jag insåg att jag behövde skapa ytterligare en
                “card” klass som skapar själva korten och dess värde. Med hjälp av den klassen kunde jag dock
                återanvända
                mycket av koden. Jag tycker det har varit lite svårt eftersom vi inte har fått någon grundlig
                föreläsning om
                hur klasser och dess attribut fungerar i Php så mycket har man behövt ta reda på själv eller googlat.
                Även
                hur sessioner fungerar har jag fortfarande lite svårt att förstå hur det fungerar. Känner inte att det
                finns
                jättemycket tid att sätta sig in i alla nya begrepp/repetera från webtec-kursen. Därav är min kod kanske
                inte den bästa SOLID eftersom jag inte riktigt vet hur jag ska kunna förbättra den när jag fortfarande
                håller på att lära mig hur jag ska formulera den. Jag vet att jag får upp många felmeddelanden med
                “composer
                lint” men innan var det nästan dubbelt så mycket och nu har jag verkligen försökt korta ner men vissa
                felmeddelanden som jag får upp har jag ingen aning om vad de betyder och när jag googlar får jag inga
                svar
                alls. Jag tog i princip bort mina “else-satser” förutom en eller två som jag var tvungen att ha med för
                att
                min kod inte skulle krascha. Jag försökte även göra ett Interface för Player-klassen men eftersom jag
                inte
                har gjort något sådant innan vet jag inte om jag gjorde rätt. Jag hade kunnat göra bättre också att
                knapparna i templaten inte går att trycka på allihop samtidigt eller att det dyker upp ett
                flash-meddelande
                direkt när poängen överstiger 21 eller liknande. Men helt ärligt hade jag kämpigt som det var att få
                spelet
                att gå runt så jag är glad att jag ens fick till något.</p>
            <p>
                Jag tycker Symfony fortfarande är ett klurigt ramverk. Jag tycker det är svårt med Namespace och dessa
                felmeddelanden som kommer upp som inte alls förklarar vad som är fel. Felsökningen tar upp ca 80% (det
                vill
                säga försöka ta reda på vad som är fel i koden) vilket lämnar ytterst lite tid till att faktiskt försöka
                implementera en bra kod som reglerar spelreglerna på ett bra sätt utan upprepning. Jag är som jag
                tidigare
                nämnt en rejäl nybörjare inom programmering så jag vet att jag har mycket kvar att lära innan jag kan
                skriva
                en dry-kod helt och hållet.
            </p>
            <p>Mitt TIL är att bara fokusera på grunderna och inte stressa över om det inte blir perfekt och jag inte
                blir
                helt nöjd över koden. Jag lägger mer tid än vad ramarna visar (säkert nästan dubbelt så mycket) och jag
                blir
                knappt nöjd ändå. Jag tyckte dock veckans omfattning var bra då det kändes som en lagom mängd.
                Anledningen
                till att det gick åt så mycket tid för min del var på grund av felsökningen och att jag inte har lärt
                mig
                grunderna i hur man kan formulera koden i objektorienterad PHP helt och hållet ännu vilket kräver att
                jag
                måste leta information på egen hand.</p>
            <h3>KMOM04</h3>
            <p>Jag tycker PHPUnit var ett mycket smidigt testverktyg då det genom Code Coverage går att se svart på vitt
                vad
                det är som testas och inte så man kan få en överblick hur man ska utforma sina tester. Jag tycker
                PHPUnit
                känns på liknande sätt hur man skriver tester i Python så därav var det ganska enkelt att förstå sig på.
                Jag
                hade troligtvis kunna skriva bättre och utförligare tester som skapa tester när koden går fel eller via
                mocking men jag var tvungen att skriva om majoriteten av min kod denna vecka då jag insåg att jag gjort
                helt
                fel när det gäller sessioner i Symfony så mitt fokus låg ganska mycket på det. </p>

            <p>På kortspelet i min src-katalog nådde jag upp till nästan 80% i kodtäckning. Det var vissa delar som jag
                tyckte var svåra att testa. Det vill säga när kortspelet var klart och man kunde få många utfall i
                statusen.
                Det tyckte jag var lite svårt att få till utan att behöva skriva en helt uppsats kod så därför testade
                jag
                bara det mest basic, att det returnerade en typ av sträng. Annars tyckte jag att min kodtäckning var
                helt
                okej. </p>

            <p>Det finns absolut delar i min kod som kan förbättras och göras mer testbar. Som att kanske ändra om alla
                mina
                if-satser till egna metoder istället, men som tidigare nämnt var jag tvungen att ändra om ganska stor
                del av
                min källkod då jag hade gjort fel med sessioner i tidigare kursmoment så därför hann jag inte med att
                ändra
                om ytterligare. Jag tycker emellertid att det var många delar i min kod som var enkla att testa som
                gjorde
                att det gick att nå hög kodtäckning. </p>

            <p>När jag skrev tester till min kod i början av veckan märkte jag att det inte fungerade med huruvida jag
                hade
                kodat mina sessioner. När jag kodade mina sessioner i tidigare kursmoment följde jag en artikel som vi
                hade
                som läsanvisning men fattade inte då att den inte gällde för Symfony eftersom det inte stod något om
                det.
                Som jag har nämnt i tidigare redovisningstexter har tidigare kursmoment varit stressiga så har inte alls
                känt mig nöjd över det jag har åstadkommit i kodväg. När jag började skriva tester denna vecka kom det
                ikapp
                mig vilket gjorde att jag nästan fick börja om på ruta ett igen kändes det som eftersom koden jag hade
                skrivit inte var testbar i den mån som det krävdes. Jag hade önskat att vi hade fått en mer
                grundläggande
                genomgång från första början hur sessioner fungerar i Symfony och inte bara en kort artikel med
                kodexempel
                eller en föreläsning när det inte förklaras så djupgående. Eftersom jag har jobbat lite med sessioner
                tidigare i webtec-kursen (dock inte så informationen satte sig så djupt) tänkte jag att man formulerade
                sig
                på samma sätt som i Symfony, men så var inte fallet. </p>

            <p>Jag tycker testbar kod kan identifiera “snygg och ren kod”. Jag märkte det när jag skrev mina tester att
                de
                metoder som var smidigast att testa var de som var korta och koncist utan invecklade if-satser osv. Om
                man
                ändrar om alla if-satser till korta metoder skulle koden bli mer testbar och samtidigt snygg och ren.
            </p>

            <p>Mitt TIL är nog att jag kanske får acceptera om jag inte hinner med veckans uppgifter när deadlinesen är
                eftersom det bidrar till att jag inte skriver bra kod när det är så pass mycket att göra. Det bästa för
                min
                del är att känna mig säker på det jag gör innan jag börjar koda eftersom det annars bidrar till att jag
                inser att jag gjort fel och får göra om allt. </p>
            <h3>KMOM05</h3>
            <p>Jag tyckte det gick bra att jobba igenom övningen med Symfony och Doctrine. Det var informationsrik och
                lärde
                ut det man behövde veta. Det jag reflekterade över var hur smidigt det gick att omvandla databasen till
                php-kod (eller hur man ska beskriva det). På så sätt behöver man inte ha både syntaxen för Sqlite och
                Symfony i huvudet då det automatiskt skapas mallar för hur man kan hämta information via databasen genom
                Doctrine.</p>
            <p>Jag tänkte att min bibliotekssida skulle vara någorlunda lik en webbshop för böcker (på en basnivå). För
                att
                förtydliga vart användaren kan klicka för att ta sig vidare till ytterligare webbsidor på webbplatsen
                finns
                det orangea knappar som sticker ut eller fetmarkerade understrukna boktitlar som visar att det är en
                länk.
                Som jag nämnde ovan är ORM ett smidigt sätt att kunna konvertera data mellan olika språk, därför gick
                det
                förvånansvärt bra för mig att jobba med ORM i crud då det kändes som mycket “skötte sig själv”. Det var
                enkelt att kunna få tag på informationen i databasen eller ändra den via get- och set-metoderna.
                Eftersom
                jag har lite koll på databaser sedan tidigare kurser gick det bra att förstå helheten med uppgiften och
                vad
                det var jag höll på med. Tidigare kurser har jag inte känt riktigt detsamma.</p>
            <p>Jag känner att jag fortfarande har mycket kvar att lära när det gäller ORM då jag bara har lärt mig de
                absoluta grunderna denna vecka, men det känns bra att vara på väg. I databas-kursen från tidigare i vår
                använde vi JavaScript tillsammans med databas och jag vet inte riktigt om det går att jämföra de rakt av
                men
                jag tycker det verkar lite smidigare med ORM på detta viset eftersom man inte behöver hålla koll på två
                olika programmeringsspråk på samma sätt (i alla fall så som jag har lärt mig denna vecka).</p>
            <p>Mitt TIL är såklart hela grejen med ORM och hur det går att göra relationsdatabasen mer objektorienterad.
                Det
                är ju lite annorlunda att jobba på detta vis än vad jag tidigare är van med så det är en utmaning att få
                det
                att fungera.</p>
            <h3>KMOM06</h3>
            <p>Jag tyckte PhpMetrics var ett smidigt verktyg att jobba med som gav en en bra överblick över koden. Jag
                hade
                dock önskat att man kunde klicka på ett resultat och få upp mer information om det, som i Scrutinizer
                exempelvis, för i vissa fall hade jag svårt att tolka hur jag skulle kunna göra förbättringar om jag
                inte
                vet
                vad siffrorna pekade på. Jag uppskattade att det fanns så tydliga tabeller som visade resultaten svart
                på
                vitt
                så man kunde få en snabb överblick. Annars kan jag tycka att det i vissa fall kan vara svårt att avläsa
                resultaten när det står så krångligt.</p>

            <p>Jag gillade även Scrutinizer som testverktyg. Det var smidigt att det automatiskt startade tester när man
                pushade till GitHub så man slapp hålla koll på sådan själv. Dock hade jag lite svårare att navigera
                mellan
                de
                olika testerna och det fanns inte lika tydliga tabeller som i PhpMetrics. Jag uppskattade dock att när
                man
                väl
                hittade det man letade efter kunde man trycka sig vidare och få en djupare inblick över vad testerna
                kollade
                på
                och vad man skulle kunna förbättra. I början hade jag 76.79 procent i kodtäckning i mina card-klasser
                och
                9.94 i
                kodkvalitet. Jag fick göra om lite för märkte att jag hade med min tools-katalog i mitt GitHub-repo som
                räknades
                med i bygget som drog ner betyget, men efter det kunde jag se till så bara mina egen kod testades.</p>

            <p>För min del så innebär bra kodkvalitét en lättläslig kod utan krångligheter. Det känns nästan som att det
                räcker
                med att man kan kolla på en kod så ser man om den har bra kvalitet eller inte. Alltså inga upprepningar
                eller
                komplexa funktioner. Dock anser jag att det krävs mycket erfarenheter inom kodning innan man kanske kan
                uppnå
                bra kodkvalitet helt och hållet. För mig som relativt nybörjare kan jag själv känna att jag kanske
                krånglar
                till
                min kod lite väl mycket eller upprepar mig ibland då jag inte vet hur jag hade kunnat lösa det på annat
                sätt.
                Därav kan dessa automatiserade tester vara en hjälp på vägen för att kunna få in ett flow i hur man
                skriver
                bra
                kod. Jag tror egentligen inte att badgesen är ett resultat hugget i sten om kodkvalitén är bra eller
                inte
                eftersom det kan vara många faktorer som spelar in hur koden är skriven. Jag skulle mer vilja se det som
                riktlinjer och förslag på hur koden kan förbättras och om det inte går att implementera förbättringen
                betyder
                det inte att koden inte är bra.</p>

            <p>Mitt TIL är nog att jag har ändrat mitt tankesätt lite hur jag kommer tänka framöver när jag skriver min
                kod.
                Innan detta kursmoment hade jag väl bara ett litet hum om komplexitet och kodtäckning. Nu när jag har
                jobbat
                med
                testerna en hel vecka ska jag exempelvis tänka lite extra när jag kanske skriver långa if-satser att det
                blir
                svårt att testa och få till en bra kodtäckning.</p>
            <h3>KMOM07/10</h3>
            <ol class="ol-report">
                <li>
                    <p> Jag genomförde krav 1,2,3 och 4. Som projektfokus valde jag att “Visualisera indikatorer för
                        hållbarhet”. Bland de globala målen valde jag att samla in statistik till min databas från
                        delmål 5
                        som
                        handlar om jämställdhet. Jag sparade all statistik i csv-filer och sen läste jag mig till hur
                        man på
                        ett
                        smidigt sätt kunde skapa ett “command” (csv:import) för att kunna lägga till datan i csv-filerna
                        till
                        tabellerna i min databas. För att kunna få ut datan i tabellerna till mina diagram som man ser
                        på
                        projektsidan skapade jag modellklasser för varje diagram. Själva diagrammen är skapade med hjälp
                        av
                        Chartjs. Det var lite svårt i början att få till så att diagrammen faktiskt gick att se på sidan
                        så
                        jag
                        fick installera “Symfony Webpack Encore” för att få det att fungera.</p>

                    <p>Till det kravet att återställa databasen var min tanke att se om det gick att återställa
                        databasen
                        från
                        en controller med de kommandon man skriver i terminalen. Därefter ville jag lägga till den
                        ursprungliga
                        datan från csv-filerna genom kommandot csv:import. Eftersom vi inte har lärt oss just hur man
                        återställer en databas sedan tidigare jag läsa mig till på annat håll samt ta del av tidigare
                        erfarenheter från de andra kurserna. Designen till min webbplats ville jag skulle gå i lite
                        klarare
                        färger än själva report-sidan. Jag tänkte utifrån ett användarperspektiv, vad som kan fånga
                        intresse
                        och
                        få användaren att vilja fortsätta läsa. Därför tyckte jag det kändes bra med flera stycken och
                        tillhörande diagram och tabeller för varje stycke utan för mycket text. För att betona vissa
                        saker
                        på
                        sidan använder jag mig av en och samma accentfärg. Jag försökte även göra sidan någorlunda
                        responsiv
                        men
                        hade självklart kunnat göra det ännu bättre men jag kände att det var inte där som fokusen låg
                        denna
                        gång.</p>

                    <p>När det gäller verktygen phpcs, phpmd, phpstan, phpunit, phpdoc, phpmetrics och Scrutinizer har
                        jag
                        gjort enligt grundkraven som krävs. Det enda som inte uppfylls är phpmd där jag får ganska många
                        felmeddelanden (av samma sort) och som inte går att åtgärda. Dessa fel grundar sig främst i ORM
                        och
                        är
                        kod som jag inte ens själv har skrivit. När jag försökte ändra till att variablen $id till
                        exempel
                        skulle vara längre än tre tecken, slutade hela databasen att fungera även att jag kollade
                        noggrant
                        så
                        alla variablar var utbytta. Eftersom det döps automatiskt till $id vet jag inte hur jag ska
                        kunna få
                        bort det och jag tänker att det är ingenting som påverkar min kod negativt. Även ett annat
                        felmeddelande
                        om variabeln $flush kvarstår men även här hade jag mycket svårt att förstå mig på felmeddelandet
                        eftersom det också är från en fil som jag inte har skrivit själv. Det är även kvar ett
                        felmeddelande
                        från tidigare kursmoment som handlar om en else-sats men jag vet redan då att jag inte kunde
                        formulera
                        om koden utan att koden skulle tappa sin funktionalitet och nu kändes det inte riktigt läge att
                        ge
                        sig
                        in i gammal kod som jag släppt. Phpstan level 1 passerar utan fel i alla fall. Phpstan och med
                        är
                        verktyg som jag jobbat med kontinuerligt under arbetets gång, även phpmetrics och Scrutinizer.
                        Det
                        är
                        skönt att ha en mall att kunna jobba utefter och få en hjälp på traven. Jag tyckte dock det var
                        mycket
                        svårt att skriva tester till mina modell-klasser för mina diagram. Det krävdes att jag behövde
                        lära
                        mig
                        själv om mocking vilket var svårt att förstå och i början fungerade det inte alls för mig. Därav
                        är
                        testerna för den klassen relativt “enkla” och täcker inte helt till 100% men de sträcker sig
                        över
                        kraven
                        dock och jag känner mig nöjd att jag lyckades klara av det till slut.</p>

                    <p>I krav 4 valde jag att skriva en artikel om snygg kod. Jag utgick helt och hållet från mina egna
                        åsikter
                        utan att använda mig av någon källa (förutom de verktyg jag hänvisar till), men jag antar att
                        det
                        var
                        det som var syftet. Jag tyckte det var kul att få sätta sig ner och fundera lite var just själva
                        begreppet om snygg och god kod innebär för mig och få skriva ner det.</p>
                </li>

                <li>
                    <p>Jag tyckte projektet gick bra att genomföra med rimlig tidsplan för att klara grunderna. Jag
                        kände
                        dock
                        att tiden inte var tillräcklig för min del i alla fall för att klara de två sista kraven men som
                        relativt nybörjare helt och hållet inom programmering får jag nöja mig med de kraven jag
                        försökte
                        mig
                        på. Jag måste erkänna att jag var ganska orolig innan projektet då jag trodde det skulle bli så
                        omfattande med tanke på hur stora kursmomenten tidigare har varit, men jag tyckte ändå det
                        kändes
                        rimligt. Eftersom det var ganska många “små delar” i grundkraven tyckte jag det var svårt att ha
                        koll på
                        så man inte har missat någon del. Jag tyckte det svåraste var att få in csv-filer till min
                        databas.
                        Jag
                        kände att jag inte ville hårdkoda in varje värde in i databasen så därför la jag mycket energi
                        på
                        att
                        lära mig hur man i Symfony kan importera csv-filer med hjälp av kommando. Jag tycker att
                        projektet
                        var
                        medelsvårt. Det var mycket nytt att lära som man själv fick ta reda på men jag tyckte ändå det
                        var
                        bra
                        att man fick prova sina vingar själv eftersom man ändå har fått en bra grund. Det som gick lätt
                        var
                        att
                        designa själva webbplatsen eftersom jag tycker det är roligt och behöver inte lägga stor energi
                        att
                        kolla upp nya saker då jag känner att grunderna sitter.</p>
                </li>
                <li>
                    <p> Jag tycker att kursen har varit bra och lärorik. Just php har inte varit mitt favoritspråk sedan
                        tidigare så inför denna kurs kände jag att grunderna inte riktigt satt innan det blev pang på en
                        stor
                        uppgift redan andra veckan. Jag tyckte kmom02 (när man skulle göra ett kortspel) var lite väl
                        stort
                        men
                        sen efter att uppgifterna minskades och vissa delar blev optionellt efter den veckan tyckte jag
                        omfånget
                        blev bättre. Jag är nöjd med kursen då jag tycker att jag har lärt mig mycket, speciellt inom
                        delen
                        “snygg kod”. Det har fått mig att tänka om lite i mitt kodskrivande, hur jag ska skriva koden
                        för
                        att
                        den ska vara enkel att testa och inte verka rörig. Jag kan absolut rekommendera kursen till
                        vänner/kollegor. Den får 7/10 poäng av mig. Motiveringen är att vissa delar i kursen var lite
                        väl
                        stora
                        och ibland innehöll det delar som vi inte ens har gått igenom under någon föreläsning. Därav har
                        jag
                        lärt mig ganska stor del av kursens kriterier “på egen hand”. </p>
                </li>
            </ol>
        </div>
    </div>


    {% include 'footer.twig' %}
</body>