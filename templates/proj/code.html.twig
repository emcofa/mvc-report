{% include 'base-project.html.twig' %}

<body>
    {% include 'nav-proj.html.twig' %}
    <div class="container-code">
        <h2>Snygg kod</h2>
        <p>
            “Finns det verkligen ett begrepp som är “Snygg och god kod”? Kan en programmerare uppfatta kod som “snygg”
            och vad innebär det och hur producerar man “snygg kod?”. Följande kommer min egen syn på ovanstående
            påståenden att presenteras i kombination med exempel och relevanta begrepp inom ämnet.</p>

        <p>I min mening är själva grundkonceptet inom “snygg kod” att kunna skriva en enkel kod utan hög komplexitet
            vilket gör att koden både blir lätt att förstå och enkel att vidareutveckla. Jag vet själv när jag tittar på
            olika kodexempel för att få hjälp att skriva min egen kod vad jag skulle definiera som en bra skriven kod
            och en lite mindre bra skriven kod. Den koden jag har lätt att förstå är den som är kort och koncist vilket
            gör att den går att inspireras av till sin egen kod. Den andra koden som är lite svårare att förstå är
            kanske den som har få funktioner med mycket kod. Det leder ofta till att koden ofta framställs som rörig och
            svår att förgripa sig på eftersom kanske en metod innehåller så många olika delar som gör att en
            “utomstående” måste sätta sig in i koden betydligt mycket mer för att få en klarhet. Jag anser dock att för
            att kunna producera snygg kod så måste programmeraren ha goda kunskaper inom språket. För mig som en relativ
            nybörjare inom programmering generellt vet jag ju som sagt vad jag själv definierar som snygg och god kod,
            men när jag välja ska sätta mig själv och programmera är det desto svårare att få till det själv eftersom
            jag inte har tillräcklig kunskap inom området ännu. Om jag emellertid jämför med hur jag skrev min kod för
            bara några månader sen och idag är det en klar förbättring. Då hade jag mycket upprepningar i min kod
            eftersom jag inte visste hur jag skulle kunna få till det med en funktion som har fler användningsområden
            men med takt att jag själv utvecklas som programmerare, desto snyggare kod anser jag själv att jag kan få
            till.</p>

        <p>Jag tror dock inte det finns ett objektivt synsätt på vad som definieras som “snygg och god kod”, utan det
            tror jag snarare är subjektivt. Detta synsätt är troligtvis lika för många personer eftersom det finns
            verktyg att ta hjälp av som fungerar som riktlinjer av vad som är snygg kod. Som i verktyget PhpMetrics som
            bland annat tar upp kodens komplexitet och om den är högre än 10 borde den försöka minskas. Det mätvärdet
            tycker jag kan definiera snygg kod ganska bra för att om kodens komplexitet är för högt så innebär det
            kanske många if-satser vilket för blotta ögat kan se rörigt ut för en utomstående. Även att ett verktyg
            kanske visar en varning för något i koden behöver det inte betyda att koden inte är “bra” eftersom
            funktionaliteten kanske behövs för att resten av koden ska fungera. Men just ur begreppet “snygg” kanske
            värdet minskar lite eftersom som jag nämnde i början bör inte koden ha för hög komplexitet och vara beroende
            av för många andra delar i koden för att kunna definieras som snygg och god kod.
            Med hjälp av alla dessa mätverktyg hjälper det en programmerare på traven att få in tänket i hur snygg kod
            bör skrivas. Som tidigare nämnt har jag framför allt tyckt det varit svårt att ändra i min kod i efterhand
            när jag testat den med de olika verktygen eftersom en ändring någonstans har medfört att koden i en annan
            del slutar fungera. Jag anser dock att med hjälp av att ha arbetat med exempelvis de fyra C:na: coupling,
            cohesion, complexity och coverage samt Scrutinizer, phpMetrics, lint osv. har jag nu i bakhuvudet hur jag
            ska formulera min kod till nästa gång eftersom jag vet vad som förväntas av mig. Eftersom jag nu har lärt
            mig hur tester implementeras och vad som är en enkel kod att testa och inte vet jag att jag kanske inte ska
            ha för många if-satser med flera olika testfall vilket gör koden svår att testa och bidrar till mindre bra
            kod och hög komplexitet. Istället kanske koden går att dela upp i metoder vilket gör att koden både ser
            snyggare ut och gör den enklare att testa.
        </p>
    </div>


    {% include 'footer-proj.html.twig' %}
</body>